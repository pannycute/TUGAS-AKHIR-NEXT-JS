/components/[content]/AddEditForm.tsx
import React, { useState, useEffect } from "react";
import { Button, Divider, Input, Modal, Text } from "@nextui-org/react";
import { Flex } from "../styles/flex";
import { User, useUserStore } from "../../stores/userStore";
import { Eye, EyeOff } from "lucide-react";
import InputSelect from "../input/InputSelect";
import { useToast } from "../toast/ToastProvider";

interface AddEditUserProps {
  initialData?: User | null;
  buttonLabel?: any;
}

const AddEditUserForm: React.FC<AddEditUserProps> = ({
  initialData = null,
  buttonLabel,
}) => {
  const [visible, setVisible] = useState(false);
  const isEditMode = !!initialData?.user_id;
  const { showToast } = useToast();

  const [form, setForm] = useState<Partial<User>>({
    user_id: undefined,
    name: "",
    email: "",
    role: "user",
    password: "",
    oldPassword: "", // untuk edit mode
    newPassword: "", // untuk edit mode
  });

  // State untuk toggle visibility password
  const [showPassword, setShowPassword] = useState(false);
  const [showOldPassword, setShowOldPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);

  const { addOne, updateOne, loading } = useUserStore();

  const handler = () => setVisible(true);

  const closeHandler = () => {
    setVisible(false);
    console.log("closed");
  };

  // Reset form ketika modal dibuka
  useEffect(() => {
    if (visible) {
      if (initialData) {
        setForm({
          user_id: initialData.user_id,
          name: initialData.name || "",
          email: initialData.email || "",
          role: initialData.role || "user",
          oldPassword: "",
          newPassword: "",
        });
      } else {
        setForm({
          user_id: undefined,
          name: "",
          email: "",
          role: "user",
          password: "",
        });
      }
    }
  }, [visible, initialData]);

  const handleChange = (e: any) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async () => {
    try {
      if (isEditMode && form.user_id) {
        await updateOne(form.user_id, form);
        showToast("Succses update user", "success");
      } else {
        await addOne(form);
        showToast("Succses create user", "success");
      }
      closeHandler();
    } catch (error) {
      console.error("Error saving user:", error);
    }
  };

  return (
    <div>
      <Button auto onClick={handler}>
        {buttonLabel || (isEditMode ? "Edit User" : "Add User")}
      </Button>
      <Modal
        closeButton
        aria-labelledby="modal-title"
        width="600px"
        open={visible}
        onClose={closeHandler}
      >
        <Modal.Header css={{ justifyContent: "start" }}>
          <Text id="modal-title" h4>
            {isEditMode ? "Edit User" : "Add New User"}
          </Text>
        </Modal.Header>
        <Divider css={{ my: "$5" }} />
        <Modal.Body css={{ py: "$10" }}>
          <Flex
            direction={"column"}
            css={{
              flexWrap: "wrap",
              gap: "$8",
              "@lg": { flexWrap: "nowrap", gap: "$12" },
            }}
          >
            <Input
              label="Full Name"
              name="name"
              bordered
              clearable
              fullWidth
              size="lg"
              placeholder="Enter full name"
              value={form.name}
              onChange={handleChange}
            />

            <Input
              label="Email"
              name="email"
              type="email"
              clearable
              bordered
              fullWidth
              size="lg"
              placeholder="Enter email"
              value={form.email}
              onChange={handleChange}
            />

            {/* Role Select */}
            <InputSelect
              label="Role"
              options={[
                { id: "admin", label: "Admin" },
                { id: "user", label: "User" },
              ]}
              selectedId={form.role ?? null}
              onChange={(option) => {
                if (option) {
                  setForm((prev) => ({ ...prev, role: option.id as string }));
                }
              }}
            />

            {/* Password Fields */}
            {isEditMode ? (
              // Edit Mode: Old Password dan New Password
              <>
                <Input
                  label="Old Password"
                  name="oldPassword"
                  type={showOldPassword ? "text" : "password"}
                  bordered
                  clearable
                  fullWidth
                  size="lg"
                  placeholder="Enter current password"
                  value={form.oldPassword ?? ""}
                  onChange={handleChange}
                />

                <Input
                  label="New Password"
                  name="newPassword"
                  type={showNewPassword ? "text" : "password"}
                  bordered
                  clearable
                  fullWidth
                  size="lg"
                  placeholder="Enter new password"
                  value={form.newPassword ?? ""}
                  onChange={handleChange}
                />
              </>
            ) : (
              // Add Mode: Single Password
              <Input
                label="Password"
                name="password"
                type={showPassword ? "text" : "password"}
                bordered
                clearable
                fullWidth
                size="lg"
                placeholder="Enter password"
                value={form.password ?? ""}
                onChange={handleChange}
              />
            )}
          </Flex>
        </Modal.Body>
        <Divider css={{ my: "$5" }} />
        <Modal.Footer>
          <Button auto onClick={handleSubmit} disabled={loading}>
            {loading ? "Saving..." : isEditMode ? "Update User" : "Add User"}
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default AddEditUserForm;

/components/[content]/index.tsx
import { Button, Text } from "@nextui-org/react";
import Link from "next/link";
import React, { useEffect, useMemo, useCallback } from "react";
import { Flex } from "../styles/flex";
import { TableWrapper, type Column } from "../table/table";
import AddEditUserForm from "./AddEditUserForm";
import { useUserStore } from "../../stores/userStore";
import { useToast } from "../toast/ToastProvider";
import { useConfirmationToast } from "../toast/ConfirmationToast";
import { Edit, Trash2, Eye, HouseIcon, UsersIcon } from "lucide-react";
import { Breadcrumbs, Crumb, CrumbLink } from "../breadcrumb/breadcrumb.styled";

export const Accounts = () => {
  const { data, loading, error, totalData, page, limit, loadAll, deleteOne } =
    useUserStore();

  const { showToast } = useToast();
  const { showToast: showConfirmationToast } = useConfirmationToast();

  // Load data saat pertama kali component mount & jika pagination berubah
  const handleLoadData = useCallback(
    (params: {
      page: number;
      limit: number;
      sortField?: string | null;
      sortDirection?: string;
    }) => {
      loadAll(params.page, params.limit);
    },
    [loadAll]
  );

  const handleDelete = (user: any) => {
    showConfirmationToast(
      `Are you sure you want to delete "${user.name}"? This action cannot be undone`,
      "error",
      {
        confirmLabel: "Delete",
        cancelLabel: "Cancel",
        onConfirm: async () => {
          await deleteOne(user.user_id);
          showToast("Succses delete user", "success");
        },
        onCancel: () => {
          // Optional: tambahkan logic jika diperlukan saat cancel
          console.log("Penghapusan dibatalkan");
        },
      }
    );
  };

  const columns: Column[] = useMemo(
    () => [
      {
        name: "NAME",
        uid: "name",
        sortable: true,
        render: (user: any) => (
          <div>
            <div style={{ fontWeight: 500 }}>{user.name}</div>
            <div style={{ fontSize: 12, color: "#666" }}>{user.email}</div>
          </div>
        ),
      },
      {
        name: "ROLE",
        uid: "role",
        sortable: true,
        render: (user: any) => (
          <div>
            <div style={{ fontWeight: 500 }}>{user.role}</div>
          </div>
        ),
      },
      {
        name: "ACTIONS",
        uid: "action",
        sortable: false,
        render: (user: any) => (
          <div style={{ display: "flex", gap: 8 }}>
            {/* <Button size="md" auto aria-label={`View details for ${user.name}`}>
              <Eye size={16} />
            </Button> */}
            <AddEditUserForm
              initialData={user}
              buttonLabel={<Edit size={16} />}
            />
            <Button
              size="md"
              color="error"
              auto
              aria-label={`Delete ${user.name}`}
              onClick={() => handleDelete(user)}
            >
              <Trash2 size={16} />
            </Button>
          </div>
        ),
      },
    ],
    [handleDelete]
  );

  useEffect(() => {
    if (error) {
      showToast(error, "error");
    }
  }, [error]);

  return (
    <Flex
      css={{
        mt: "$5",
        px: "$6",
        "@sm": {
          mt: "$10",
          px: "$16",
        },
      }}
      justify={"center"}
      direction={"column"}
    >
      <Breadcrumbs>
        <Crumb>
          <HouseIcon />
          <Link href={"/"}>
            <CrumbLink href="#">Home</CrumbLink>
          </Link>
          <Text>/</Text>
        </Crumb>
        <Crumb>
          <UsersIcon />
          <CrumbLink href="#">Users</CrumbLink>
          <Text>/</Text>
        </Crumb>
        <Crumb>
          <CrumbLink href="#">List</CrumbLink>
        </Crumb>
      </Breadcrumbs>

      <Flex
        css={{
          gap: "$8",
        }}
        align={"center"}
        justify={"between"}
        wrap={"wrap"}
      >
        <Text h3>All Accounts</Text>
        <Flex direction={"row"} css={{ gap: "$6" }} wrap={"wrap"}>
          <AddEditUserForm />
        </Flex>
      </Flex>

      <TableWrapper
        columns={columns}
        data={data}
        loading={loading}
        totalItems={totalData}
        onDataChange={handleLoadData}
        limitOptions={[5, 10, 15, 25]}
        defaultLimit={limit}
        defaultPage={page}
        defaultSortField="name"
        defaultSortDirection="asc"
        ariaLabel="Users management table"
        // selectionMode="multiple"
        showLimitSelector={true}
        showPagination={true}
        showSorting={false}
      />
    </Flex>
  );
};


Buatkan struktur folder dan isi file untuk tampilan page dari content:

Content = products
Primary key = products_id
Field = 
Enpoint Select Input 1 (optional) = 
Params Filter Select Input 1 (Optional) = 
Enpoint Select Input 2 (optional) = 
Params Filter Select Input 1 (Optional) = 

Jika ada Select Input gunakan InputSelect component dan data akan di ambil dari api.
Setiap request api akan menggunakan axiosInstance dari "@/utils/axiosInstance"
Data dari response success api di response.data.data 
Data dari response error api di err.response.data.message
Gunakan block try-catch untuk handling function API 
Setiap content sudah memilih store dan itu konsisten jadi gunakan saja di "@/stores/[content]Store"
Buat 2 File index.tsx dan AddEditForm.tsx, sesuai dengan contoh di atas.